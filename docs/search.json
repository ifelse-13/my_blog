[
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post Blog",
    "section": "",
    "text": "Le package olympicsWeater est une librairie developpée dans le cadre d”un cours d’informatique de master 1 dans l’optique de faire des previsions meteorologiques pour les differents sites des jeux olympiques pour l”Edition 2024 de Paris.\nLa librairie contient une fonction générique get_forecast qui permet de donner les differentes prévisions métérologiques pour 7 jours avec comme arguemnt fourni, la donnée de géolocalisation qui peut etre une addresse complete en format caractere ou des donnees de latitude et longitude.\nCette fonction permet de requeter une API en extrayant les dates, les températures en degré celsius, les température ressentie, les probabilités de précipitation et les précipitations en mm.\nL’installation du package se fait à l’aide de la fonction install_github de la librairie remotes. La syntaxe à suivre est la suivante:\n\ninstall.packages(\"remotes\")  \nremotes::install_github(\"ifelse-13/olympicsWeather\")\nlibrary(olympicsWeather) \n# la ligne de code ci-dessous permet d'obtenir la doucmentation de la fonction get_forecast \n?get_forecast"
  },
  {
    "objectID": "posts/post-with-code/index.html#package-olympicsweather",
    "href": "posts/post-with-code/index.html#package-olympicsweather",
    "title": "Post Blog",
    "section": "",
    "text": "Le package olympicsWeater est une librairie developpée dans le cadre d”un cours d’informatique de master 1 dans l’optique de faire des previsions meteorologiques pour les differents sites des jeux olympiques pour l”Edition 2024 de Paris.\nLa librairie contient une fonction générique get_forecast qui permet de donner les differentes prévisions métérologiques pour 7 jours avec comme arguemnt fourni, la donnée de géolocalisation qui peut etre une addresse complete en format caractere ou des donnees de latitude et longitude.\nCette fonction permet de requeter une API en extrayant les dates, les températures en degré celsius, les température ressentie, les probabilités de précipitation et les précipitations en mm.\nL’installation du package se fait à l’aide de la fonction install_github de la librairie remotes. La syntaxe à suivre est la suivante:\n\ninstall.packages(\"remotes\")  \nremotes::install_github(\"ifelse-13/olympicsWeather\")\nlibrary(olympicsWeather) \n# la ligne de code ci-dessous permet d'obtenir la doucmentation de la fonction get_forecast \n?get_forecast"
  },
  {
    "objectID": "posts/post-with-code/index.html#les-prévisions-météo",
    "href": "posts/post-with-code/index.html#les-prévisions-météo",
    "title": "Post Blog",
    "section": "Les prévisions météo",
    "text": "Les prévisions météo\nLa fonction get_forecast du package olympicsWeather sera utilisé pour les prévisions météorologiques pour les différentes sections ci-dessus.\n\nLe stade de France\n\nmeteo_stade_de_france &lt;-olympicsWeather::get_forecast(\"Stade de france\") \n\nPassing 1 address to the Nominatim single address geocoder\n\n\nQuery completed in: 1 seconds\n\n\nWarning: `as.tibble()` was deprecated in tibble 2.0.0.\nℹ Please use `as_tibble()` instead.\nℹ The signature and semantics have changed, see `?as_tibble`.\nℹ The deprecated feature was likely used in the olympicsWeather package.\n  Please report the issue to the authors.\n\n\n\n\nTahiti\n\nmeteo_tahiti &lt;-olympicsWeather::get_forecast(\"Tahiti\")\n\nPassing 1 address to the Nominatim single address geocoder\n\n\nQuery completed in: 1 seconds\n\n\n\n\nCoordonnées GPS 43.276703, 5.334791\n\nmeteo_gps &lt;-olympicsWeather::get_forecast(c(43.276703,5.334791))"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BLOG",
    "section": "",
    "text": "TD3\n\n\n\n\n\n\n\ntravaux dirigés\n\n\n\n\n\n\n\n\n\n\n\nMar 10, 2024\n\n\nNiamiti Bethel TOUMAN\n\n\n\n\n\n\n  \n\n\n\n\nTD2\n\n\n\n\n\n\n\ntravaux dirigés\n\n\n\n\n\n\n\n\n\n\n\nMar 9, 2024\n\n\nNiamiti Bethel TOUMAN\n\n\n\n\n\n\n  \n\n\n\n\nTD1\n\n\n\n\n\n\n\ntravaux dirigés\n\n\n\n\n\n\n\n\n\n\n\nMar 8, 2024\n\n\nNiamiti Bethel TOUMAN\n\n\n\n\n\n\n  \n\n\n\n\nPackage usage\n\n\n\n\n\n\n\npackage\n\n\n\n\n\n\n\n\n\n\n\nMar 7, 2024\n\n\nNiamiti Bethel TOUMAN\n\n\n\n\n\n\n  \n\n\n\n\nBienvenue sur mon blog\n\n\n\n\n\n\n\naccueil\n\n\nnews\n\n\npackage\n\n\ntravaux dirigés\n\n\n\n\n\n\n\n\n\n\n\nFeb 27, 2024\n\n\nNiamiti TOUMAN\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Bienvenue sur mon blog",
    "section": "",
    "text": "Bienvenue sur la page Blog Quarto de mon repertoire Github.\nCe Blog est destiné à la publication des travaux dirigés réalisés dans le cadre de mon cours de R avancé et introduction à github et de ma librairie OlympicsWeather."
  },
  {
    "objectID": "docs/posts/new_post/index.html",
    "href": "docs/posts/new_post/index.html",
    "title": "Package usage",
    "section": "",
    "text": "Le package olympicsWeater est une librairie développée dans le cadre d’un cours d’informatique de master 1 dans l’optique de faire des prévisions météorologiques pour les différents sites des jeux olympiques pour l’Edition 2024 de Paris.\nLa librairie contient une fonction générique get_forecast qui permet de donner les différentes prévisions métérologiques pour 7 jours avec comme arguemnt fourni, la donnée de géolocalisation qui peut être une addresse complète en format caractère ou des données de latitude et longitude.\nCette fonction permet de requêter une API en extrayant les dates, les températures en degré celsius, les températures ressenties, les probabilités de précipitation et les précipitations en mm.\nL’installation du package se fait à l’aide de la fonction install_github de la librairie “remotes”. La syntaxe à suivre est la suivante:\n\ninstall.packages(\"remotes\")  \nremotes::install_github(\"ifelse-13/olympicsWeather\")\nlibrary(olympicsWeather) \n# la ligne de code ci-dessous permet d'obtenir la doucmentation de la fonction get_forecast \n?get_forecast"
  },
  {
    "objectID": "docs/posts/new_post/index.html#package-olympicsweather",
    "href": "docs/posts/new_post/index.html#package-olympicsweather",
    "title": "Package usage",
    "section": "",
    "text": "Le package olympicsWeater est une librairie développée dans le cadre d’un cours d’informatique de master 1 dans l’optique de faire des prévisions météorologiques pour les différents sites des jeux olympiques pour l’Edition 2024 de Paris.\nLa librairie contient une fonction générique get_forecast qui permet de donner les différentes prévisions métérologiques pour 7 jours avec comme arguemnt fourni, la donnée de géolocalisation qui peut être une addresse complète en format caractère ou des données de latitude et longitude.\nCette fonction permet de requêter une API en extrayant les dates, les températures en degré celsius, les températures ressenties, les probabilités de précipitation et les précipitations en mm.\nL’installation du package se fait à l’aide de la fonction install_github de la librairie “remotes”. La syntaxe à suivre est la suivante:\n\ninstall.packages(\"remotes\")  \nremotes::install_github(\"ifelse-13/olympicsWeather\")\nlibrary(olympicsWeather) \n# la ligne de code ci-dessous permet d'obtenir la doucmentation de la fonction get_forecast \n?get_forecast"
  },
  {
    "objectID": "docs/posts/new_post/index.html#les-prévisions-météo",
    "href": "docs/posts/new_post/index.html#les-prévisions-météo",
    "title": "Post Blog",
    "section": "Les prévisions météo",
    "text": "Les prévisions météo\nLa fonction get_forecast du package olympicsWeather sera utilisé pour les prévisions météorologiques pour les différentes sections ci-dessus.\n\nLe stade de France\n\nmeteo_stade_de_france &lt;-olympicsWeather::get_forecast(\"Stade de france\")|&gt; print(n=10)\n\nPassing 1 address to the Nominatim single address geocoder\n\n\nQuery completed in: 2.1 seconds\n\n\n# A tibble: 168 × 5\n   date_heure temperature_celsius temperature_ressentie_ce…¹ precipitation_proba\n   &lt;list&gt;     &lt;list&gt;              &lt;list&gt;                     &lt;list&gt;             \n 1 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 2 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 3 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 4 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 5 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 6 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 7 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 8 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 9 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n10 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​temperature_ressentie_celsius\n# ℹ 1 more variable: precipitation &lt;list&gt;\n\n\n\n\nTahiti\n\nmeteo_tahiti &lt;-olympicsWeather::get_forecast(\"Tahiti\") |&gt; print(n=10)\n\nPassing 1 address to the Nominatim single address geocoder\n\n\nQuery completed in: 1 seconds\n\n\n# A tibble: 168 × 5\n   date_heure temperature_celsius temperature_ressentie_ce…¹ precipitation_proba\n   &lt;list&gt;     &lt;list&gt;              &lt;list&gt;                     &lt;list&gt;             \n 1 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 2 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 3 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 4 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 5 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 6 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 7 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 8 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 9 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n10 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​temperature_ressentie_celsius\n# ℹ 1 more variable: precipitation &lt;list&gt;\n\n\n\n\nCoordonnées GPS 43.276703, 5.334791\n\nmeteo_gps &lt;-olympicsWeather::get_forecast(c(43.276703,5.334791))|&gt; print(n=10)\n\n# A tibble: 168 × 5\n   date_heure temperature_celsius temperature_ressentie_ce…¹ precipitation_proba\n   &lt;list&gt;     &lt;list&gt;              &lt;list&gt;                     &lt;list&gt;             \n 1 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 2 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 3 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 4 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 5 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 6 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 7 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 8 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 9 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n10 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​temperature_ressentie_celsius\n# ℹ 1 more variable: precipitation &lt;list&gt;"
  },
  {
    "objectID": "docs/posts/new_post/index.html#les-prévisions-météorologiques",
    "href": "docs/posts/new_post/index.html#les-prévisions-météorologiques",
    "title": "Package usage",
    "section": "Les prévisions météorologiques",
    "text": "Les prévisions météorologiques\nLa fonction get_forecast du package “olympicsWeather” sera utilisée pour les prévisions météorologiques pour les différentes sections ci-dessus.\n\nLe stade de France\n\nmeteo_stade_de_france &lt;-olympicsWeather::get_forecast(\"Stade de france\")|&gt; print(n=10)\n\n# A tibble: 168 × 5\n   date_heure temperature_celsius temperature_ressentie_ce…¹ precipitation_proba\n   &lt;list&gt;     &lt;list&gt;              &lt;list&gt;                     &lt;list&gt;             \n 1 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 2 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 3 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 4 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 5 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 6 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 7 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 8 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 9 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n10 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​temperature_ressentie_celsius\n# ℹ 1 more variable: precipitation &lt;list&gt;\n\n\n\n\nTahiti\n\nmeteo_tahiti &lt;-olympicsWeather::get_forecast(\"Tahiti\") |&gt; print(n=10)\n\n# A tibble: 168 × 5\n   date_heure temperature_celsius temperature_ressentie_ce…¹ precipitation_proba\n   &lt;list&gt;     &lt;list&gt;              &lt;list&gt;                     &lt;list&gt;             \n 1 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 2 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 3 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 4 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 5 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 6 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 7 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 8 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 9 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n10 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​temperature_ressentie_celsius\n# ℹ 1 more variable: precipitation &lt;list&gt;\n\n\n\n\nCoordonnées GPS 43.276703, 5.334791\n\nmeteo_gps &lt;-olympicsWeather::get_forecast(c(43.276703,5.334791))|&gt; print(n=10)\n\n# A tibble: 168 × 5\n   date_heure temperature_celsius temperature_ressentie_ce…¹ precipitation_proba\n   &lt;list&gt;     &lt;list&gt;              &lt;list&gt;                     &lt;list&gt;             \n 1 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 2 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 3 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 4 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 5 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 6 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 7 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 8 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n 9 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n10 &lt;chr [1]&gt;  &lt;dbl [1]&gt;           &lt;dbl [1]&gt;                  &lt;int [1]&gt;          \n# ℹ 158 more rows\n# ℹ abbreviated name: ¹​temperature_ressentie_celsius\n# ℹ 1 more variable: precipitation &lt;list&gt;"
  },
  {
    "objectID": "docs/posts/first_td/index.html",
    "href": "docs/posts/first_td/index.html",
    "title": "TD1",
    "section": "",
    "text": "Importation des librairies\n\nlibrary(tidyverse)\n\nL’importation de la base de données se fait par un read.csv2\n\ndata_ex=read.csv2(\"paris-2024-sites-olympiques-et-paralympiques-franciliens (1).csv\")\n\nVisualisation de la base et des caracteristiques\n\ndata_ex\n\n             geo_point                                             nom\n1  48.841319, 2.253076                                Parc des Princes\n2  48.924388, 2.359871                                 Stade de France\n3    48.751095, 2.0759                                   Golf national\n4  48.788046, 2.034987 Vélodrome National de Saint-Quentin-en-Yvelines\n5   48.84732, 2.245501                             Stade Roland Garros\n6  48.911184, 2.546395                                Clichy-sous-Bois\n7  48.830231, 2.289126         Arena Paris Sud 4 (Porte de Versailles)\n8  48.856858, 2.351415                         Hôtel de ville de Paris\n9    48.856262, 2.2914                                     Pont d'Iéna\n10 48.838649, 2.378496                                     Arena Bercy\n11 48.971314, 2.519183                                Arena Paris nord\n12 48.829624, 2.290777         Arena Paris Sud 6 (Porte de Versailles)\n13 48.865589, 2.321205                            Stade de la Concorde\n14 48.930873, 2.249836                            Stade Yves du Manoir\n15 48.854536, 2.300413                            Arena Champs de Mars\n16   48.89566, 2.22971                                La Défense Arena\n17 48.862229, 2.636374                                  Stade nautique\n18 48.832068, 2.284126         Arena Paris Sud 1 (Porte de Versailles)\n19 48.857232, 2.296084                               Stade Tour Eiffel\n20 48.787261, 2.034736          Stade BMX de Saint-Quentin-en-Yvelines\n21 48.899483, 2.361803                               Arena La Chapelle\n22 48.835157, 2.257363                       Stade Pierre de Coubertin\n23 48.923457, 2.355527                                Centre aquatique\n24  48.92467, 2.332428                               Village olympique\n25  48.815115, 2.08208                           Château de Versailles\n26 48.944207, 2.424716                              Village des médias\n27 48.944643, 2.408258             Terrain des Essences - La Courneuve\n28 48.788162, 1.967776                             Colline d'Elancourt\n29 48.866041, 2.312406                                    Grand Palais\n30 48.862286, 2.313222                                       Invalides\n31 48.937188, 2.420467                      Site d'escalade du Bourget\n     sites_olympiques_paralympiques\n1                    Site olympique\n2  Site olympique,Site paralympique\n3                    Site olympique\n4  Site olympique,Site paralympique\n5  Site olympique,Site paralympique\n6                 Site paralympique\n7  Site olympique,Site paralympique\n8                    Site olympique\n9                    Site olympique\n10 Site olympique,Site paralympique\n11 Site olympique,Site paralympique\n12 Site olympique,Site paralympique\n13                   Site olympique\n14                   Site olympique\n15 Site olympique,Site paralympique\n16 Site olympique,Site paralympique\n17 Site olympique,Site paralympique\n18 Site olympique,Site paralympique\n19 Site olympique,Site paralympique\n20                   Site olympique\n21 Site olympique,Site paralympique\n22                Site paralympique\n23                   Site olympique\n24                                 \n25 Site olympique,Site paralympique\n26                                 \n27                Site paralympique\n28                   Site olympique\n29 Site olympique,Site paralympique\n30 Site olympique,Site paralympique\n31                   Site olympique\n                                                             sports\n1                                                          Football\n2                                  Athlétisme,Para athlétisme,Rugby\n3                                                              Golf\n4                        Cyclisme sur piste,Para cyclisme sur piste\n5                                       Tennis,Tennis fauteuil,Boxe\n6                                           Para cyclisme sur route\n7                              Tennis de table,Para tennis de table\n8                                                        Athlétisme\n9                                     Cyclisme sur route,Athlétisme\n10     Basketball,Basket fauteuil,Gymnastique artistique,trampoline\n11                Boxe,Escrime,Pentathlon moderne,Volley-ball assis\n12                                  Haltérophilie,Handball,Goalball\n13                 Basketball 3x3,BMX freestyle,Breaking,Skateboard\n14                                                           Hockey\n15                              Judo,Para judo,Lutte,Rugby fauteuil\n16                                Natation,Para natation,Water-polo\n17                              Canoë,Para canoë,Aviron,Para aviron\n18                                                Volleyball,Boccia\n19                                     Volleyball de plage,Cécifoot\n20                                                         BMX race\n21 Badminton,Para Badminton,Gymnastique rythmique,Para powerlifting\n22                                                         Goalball\n23                          Natation artistique,Plongeon,Water-polo\n24                                                                 \n25              Sports équestres,Para équitation,Pentathlon moderne\n26                                                                 \n27                                                  Para athlétisme\n28                                                              VTT\n29                Escrime,Escrime fauteuil,Taekwondo,Para taekwondo\n30       Tir à l'arc,Para tir à l'arc,Athlétisme,Cyclisme sur route\n31                                                Escalade sportive\n\nstr(data_ex)\n\n'data.frame':   31 obs. of  4 variables:\n $ geo_point                     : chr  \"48.841319, 2.253076\" \"48.924388, 2.359871\" \"48.751095, 2.0759\" \"48.788046, 2.034987\" ...\n $ nom                           : chr  \"Parc des Princes\" \"Stade de France\" \"Golf national\" \"Vélodrome National de Saint-Quentin-en-Yvelines\" ...\n $ sites_olympiques_paralympiques: chr  \"Site olympique\" \"Site olympique,Site paralympique\" \"Site olympique\" \"Site olympique,Site paralympique\" ...\n $ sports                        : chr  \"Football\" \"Athlétisme,Para athlétisme,Rugby\" \"Golf\" \"Cyclisme sur piste,Para cyclisme sur piste\" ...\n\nsummary(data_ex)\n\n  geo_point             nom            sites_olympiques_paralympiques\n Length:31          Length:31          Length:31                     \n Class :character   Class :character   Class :character              \n Mode  :character   Mode  :character   Mode  :character              \n    sports         \n Length:31         \n Class :character  \n Mode  :character  \n\n\nLa base est constitué des variables qualitatives de type chaîne de caractères.\n\nQuestion 3\nCombien y a t’il de sites olympiques ?\n\ndata_ex |&gt; \n  count(sites_olympiques_paralympiques)\n\n    sites_olympiques_paralympiques  n\n1                                   2\n2                   Site olympique 10\n3 Site olympique,Site paralympique 16\n4                Site paralympique  3\n\ntable(grepl(\"Site olympique\",data_ex$sites_olympiques_paralympiques))\n\n\nFALSE  TRUE \n    5    26 \n\n\nNous avons 26 sites Olympiques.\n\n\nQuestion 4\nCombien y a t’il de sites paralympiques ?\n\ntable(grepl(\"Site paralympique\",data_ex$sites_olympiques_paralympiques))\n\n\nFALSE  TRUE \n   12    19 \n\n\nNous avons ici 19 sites paralympiques.\n\n\nQuestion 5\nQuels sont les sites qui accueillent plusieurs disciplines sportives ?\n\n  data_ex&lt;-data_ex |&gt; \n    mutate(many_sports=sapply(strsplit(data_ex$sports, \",\"), length)\n    )\n  plus_de_sport&lt;-data_ex |&gt; \n  filter(many_sports&gt;1)\ndim(plus_de_sport)\n\n[1] 19  5\n\n\nNous avons 19 sites qui accueillent plusieurs disciplines sportives.\n\n\nQuestion 6\nQuels sont les disciplines para-olympiques accueillies dans ces sites franciliens ?\n\ndonnees = as.tibble(data_ex)\n\nsites_paralympiques &lt;- donnees |&gt; \n  filter(str_detect(sites_olympiques_paralympiques, \"Site paralympique\"))\n\ndisciplines_paralympiques &lt;- sites_paralympiques |&gt; \n  pull(sports) |&gt; \n  strsplit(\",\") |&gt; \n  unlist() |&gt; \n  trimws()\nprint(disciplines_paralympiques)\n\n [1] \"Athlétisme\"              \"Para athlétisme\"        \n [3] \"Rugby\"                   \"Cyclisme sur piste\"     \n [5] \"Para cyclisme sur piste\" \"Tennis\"                 \n [7] \"Tennis fauteuil\"         \"Boxe\"                   \n [9] \"Para cyclisme sur route\" \"Tennis de table\"        \n[11] \"Para tennis de table\"    \"Basketball\"             \n[13] \"Basket fauteuil\"         \"Gymnastique artistique\" \n[15] \"trampoline\"              \"Boxe\"                   \n[17] \"Escrime\"                 \"Pentathlon moderne\"     \n[19] \"Volley-ball assis\"       \"Haltérophilie\"          \n[21] \"Handball\"                \"Goalball\"               \n[23] \"Judo\"                    \"Para judo\"              \n[25] \"Lutte\"                   \"Rugby fauteuil\"         \n[27] \"Natation\"                \"Para natation\"          \n[29] \"Water-polo\"              \"Canoë\"                  \n[31] \"Para canoë\"              \"Aviron\"                 \n[33] \"Para aviron\"             \"Volleyball\"             \n[35] \"Boccia\"                  \"Volleyball de plage\"    \n[37] \"Cécifoot\"                \"Badminton\"              \n[39] \"Para Badminton\"          \"Gymnastique rythmique\"  \n[41] \"Para powerlifting\"       \"Goalball\"               \n[43] \"Sports équestres\"        \"Para équitation\"        \n[45] \"Pentathlon moderne\"      \"Para athlétisme\"        \n[47] \"Escrime\"                 \"Escrime fauteuil\"       \n[49] \"Taekwondo\"               \"Para taekwondo\"         \n[51] \"Tir à l'arc\"             \"Para tir à l'arc\"       \n[53] \"Athlétisme\"              \"Cyclisme sur route\"     \n\ndisciplines_para &lt;- str_subset(disciplines_paralympiques, \"^Para\")\n\n# les différentes disciplines sont les suivantes:\nprint(unique(disciplines_para))\n\n [1] \"Para athlétisme\"         \"Para cyclisme sur piste\"\n [3] \"Para cyclisme sur route\" \"Para tennis de table\"   \n [5] \"Para judo\"               \"Para natation\"          \n [7] \"Para canoë\"              \"Para aviron\"            \n [9] \"Para Badminton\"          \"Para powerlifting\"      \n[11] \"Para équitation\"         \"Para taekwondo\"         \n[13] \"Para tir à l'arc\"       \n\n\n\n\nQuestion 7\nQuel(s) site(s) accueille(nt) le plus de disciplines différentes ?\n\nplus_de_sport |&gt; \n  arrange(desc(many_sports)) |&gt; select(nom) |&gt; head(8)\n\n                   nom\n1          Arena Bercy\n2     Arena Paris nord\n3 Stade de la Concorde\n4 Arena Champs de Mars\n5       Stade nautique\n6    Arena La Chapelle\n7         Grand Palais\n8            Invalides\n\n\nLes sites qui accueillent le plus de disciplines différentes sont: Arena Bercy, Arena Paris nord, Stade de la Concorde, Arena Champs de Mars, Stade nautique, Arena La Chapelle, Grand Palais, Invalides.\n\n\nQuestion 8\nQuel discipline aura lieu sur le plus grand nombre de sites ? Quels sont ces sites ?\n\ndisciplines_sites &lt;- donnees |&gt; \n  separate_rows(sports, sep = \",\")\n\noccurrences_disciplines &lt;- disciplines_sites |&gt; \n  group_by(sports) |&gt; \n  summarise(occurrences = n())\n\ndiscipline_max_occurrences &lt;- occurrences_disciplines |&gt; \n  filter(occurrences == max(occurrences))\n\nprint(discipline_max_occurrences)\n\n# A tibble: 1 × 2\n  sports     occurrences\n  &lt;chr&gt;            &lt;int&gt;\n1 Athlétisme           4\n\nsites_discipline_max_occurrences &lt;- disciplines_sites |&gt; \n  filter(sports == discipline_max_occurrences$sports) |&gt; \n  left_join(donnees, by = c(\"geo_point\", \"nom\", \"sites_olympiques_paralympiques\", \"sports\"))\n\nsites_discipline_max_occurrences |&gt; select(nom)\n\n# A tibble: 4 × 1\n  nom                    \n  &lt;chr&gt;                  \n1 Stade de France        \n2 Hôtel de ville de Paris\n3 Pont d'Iéna            \n4 Invalides              \n\n\nLa discipline qui aura lieu sur le plus grands nombre de sites est l’Athlétisme.\nLes differents sites concernés sont le Stade de France, Hôtel de ville de Paris, Pont d’Iéna et Invalides.\n\n\nQuestion 9\nA vol d’oiseau, quels sont les sites les deux sites les plus proches ?\n\nlibrary(geosphere)\ndonnees &lt;- donnees |&gt; \n  separate(geo_point, into = c(\"latitude\", \"longitude\"), sep = \",\") |&gt; \n  mutate(across(c(latitude, longitude), as.numeric))\n\ndf &lt;- as.data.frame(donnees)\nn &lt;- nrow(df)\n\ndonnees_distance &lt;- data.frame()\n\nfor (i in 1:(n - 1)) {\n  for (j in (i + 1): n) {\n    distance &lt;- distHaversine(\n      c(df[i, \"longitude\"], df[i, \"latitude\"]),\n      c(df[j, \"longitude\"], df[j, \"latitude\"])\n    )\ndddf &lt;- data.frame(\n  site_1=df[i,\"nom\"],\n  site_2=df[j,\"nom\"],\n  lon_1=df[i, \"longitude\"],\n  lat_1=df[i, \"latitude\"],\n  lon_2=df[j, \"longitude\"],\n  lat_2=df[j, \"latitude\"],\n  dis=distance\n)\ndonnees_distance &lt;- rbind(donnees_distance,dddf)\n  }\n}\n\nQ9 =donnees_distance |&gt; \n  filter(dis==min(dis))\nprint(Q9)\n\n                                           site_1\n1 Vélodrome National de Saint-Quentin-en-Yvelines\n                                  site_2    lon_1    lat_1    lon_2    lat_2\n1 Stade BMX de Saint-Quentin-en-Yvelines 2.034987 48.78805 2.034736 48.78726\n       dis\n1 89.30382\n\n\nLes deux sites les plus proches sont le Vélodrome national de Saint-Quentin-en-Yvelines et le Stade BMX de Saint-Quentin-en-Yvelines avec une distance de 89.30.\n\n\nQuestion 10\nQuels sont les deux sites les plus éloignés ?\n\nQ10 = donnees_distance |&gt; filter(dis==max(dis))\nprint(Q10)\n\n          site_1              site_2    lon_1    lat_1    lon_2    lat_2\n1 Stade nautique Colline d'Elancourt 2.636374 48.86223 1.967776 48.78816\n       dis\n1 49688.97\n\n\nLes deux sites les plus éloignés en terme de distance sont le Stade Nautique et Colline d’Elancourt avec une distance de 49688.97.\n\n\nQuestion 11\nVous êtes un heureux millionaire et souhaitez investir dans un bien immobilier. Vous décidez d’acheter un appartement situé au barycentre de l’ensemble des sites olympiques. Où se situe cet appartement ?\nLe barycentre correspond au centre de tous les points des sites c’est à dire les latitudes et longitudes moyennes des sites de la base de données.\n\nbarycentre &lt;- df |&gt; \n  summarise(\n    latitude = mean(latitude),\n    longitude = mean(longitude)\n  )\n\nlibrary(tidygeocoder)\n\nbarycentre |&gt; \n  tidygeocoder::reverse_geocode(lat = latitude,long = longitude)\n\n# A tibble: 1 × 3\n  latitude longitude address                                                    \n     &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;                                                      \n1     48.9      2.30 23, Avenue Pierre 1er de Serbie, Quartier de Chaillot, Par…\n\n\nL’addresse correspondante est 23 Avenue Pierre 1er de Serbie, Quartier de Chaillot, Paris 16e Arrondissement, Paris."
  },
  {
    "objectID": "docs/posts/welcome/index.html",
    "href": "docs/posts/welcome/index.html",
    "title": "Bienvenue sur mon blog",
    "section": "",
    "text": "Bienvenue sur la page Blog Quarto de mon repertoire Github."
  },
  {
    "objectID": "posts/post-with-code/pack.html",
    "href": "posts/post-with-code/pack.html",
    "title": "Package usage",
    "section": "",
    "text": "Le package olympicsWeater est une librairie développée dans le cadre d’un cours d’informatique de master 1 dans l’optique de faire des prévisions météorologiques pour les différents sites des jeux olympiques pour l’Edition 2024 de Paris.\nLa librairie contient une fonction générique get_forecast qui permet de donner les différentes prévisions métérologiques pour 7 jours avec comme arguemnt fourni, la donnée de géolocalisation qui peut être une addresse complète en format caractère ou des données de latitude et longitude.\nCette fonction permet de requêter une API en extrayant les dates, les températures en degré celsius, les températures ressenties, les probabilités de précipitation et les précipitations en mm.\nL’installation du package se fait à l’aide de la fonction install_github de la librairie “remotes”. La syntaxe à suivre est la suivante:\n\ninstall.packages(\"remotes\")  \nremotes::install_github(\"ifelse-13/olympicsWeather\")\nlibrary(olympicsWeather) \n# la ligne de code ci-dessous permet d'obtenir la doucmentation de la fonction get_forecast \n?get_forecast"
  },
  {
    "objectID": "posts/post-with-code/pack.html#package-olympicsweather",
    "href": "posts/post-with-code/pack.html#package-olympicsweather",
    "title": "Package usage",
    "section": "",
    "text": "Le package olympicsWeater est une librairie développée dans le cadre d’un cours d’informatique de master 1 dans l’optique de faire des prévisions météorologiques pour les différents sites des jeux olympiques pour l’Edition 2024 de Paris.\nLa librairie contient une fonction générique get_forecast qui permet de donner les différentes prévisions métérologiques pour 7 jours avec comme arguemnt fourni, la donnée de géolocalisation qui peut être une addresse complète en format caractère ou des données de latitude et longitude.\nCette fonction permet de requêter une API en extrayant les dates, les températures en degré celsius, les températures ressenties, les probabilités de précipitation et les précipitations en mm.\nL’installation du package se fait à l’aide de la fonction install_github de la librairie “remotes”. La syntaxe à suivre est la suivante:\n\ninstall.packages(\"remotes\")  \nremotes::install_github(\"ifelse-13/olympicsWeather\")\nlibrary(olympicsWeather) \n# la ligne de code ci-dessous permet d'obtenir la doucmentation de la fonction get_forecast \n?get_forecast"
  },
  {
    "objectID": "posts/post-with-code/pack.html#les-prévisions-météorologiques",
    "href": "posts/post-with-code/pack.html#les-prévisions-météorologiques",
    "title": "Package usage",
    "section": "Les prévisions météorologiques",
    "text": "Les prévisions météorologiques\nLa fonction get_forecast du package “olympicsWeather” sera utilisée pour les prévisions météorologiques pour les différentes sections ci-dessus.\n\nLe stade de France\n\nfrance&lt;-olympicsWeather::get_forecast(\"Stade de france\")|&gt; as.data.frame() \nfrance |&gt; head(2)\n\n        date_heure temperature_celsius temperature_ressentie_celsius\n1 2024-03-10T00:00                   8                           6.2\n2 2024-03-10T01:00                   8                           5.4\n  precipitation_proba precipitation\n1                  32             0\n2                  27             0\n\n\n\n\nTahiti\n\ntahiti&lt;-olympicsWeather::get_forecast(\"Tahiti\") |&gt;as.data.frame() \ntahiti |&gt; head(2)\n\n        date_heure temperature_celsius temperature_ressentie_celsius\n1 2024-03-10T00:00                17.1                          19.4\n2 2024-03-10T01:00                16.9                          18.5\n  precipitation_proba precipitation\n1                 100           0.1\n2                 100           0.3\n\n\n\n\nCoordonnées GPS 43.276703, 5.334791\n\ncoord&lt;-olympicsWeather::get_forecast(c(43.276703,5.334791))|&gt;as.data.frame()\ncoord |&gt;head(2)\n\n        date_heure temperature_celsius temperature_ressentie_celsius\n1 2024-03-10T00:00                12.5                           4.7\n2 2024-03-10T01:00                12.4                             6\n  precipitation_proba precipitation\n1                 100           1.4\n2                 100           4.2"
  },
  {
    "objectID": "posts/post-with-code/TD1.html",
    "href": "posts/post-with-code/TD1.html",
    "title": "TD1",
    "section": "",
    "text": "Importation des librairies\n\nlibrary(tidyverse)\n\nL’importation de la base de données se fait par un read.csv2\n\ndata_ex=read.csv2(\"paris-2024-sites-olympiques-et-paralympiques-franciliens (1).csv\")\n\nVisualisation de la base et des caracteristiques\n\ndata_ex |&gt; head(10)\n\n             geo_point                                             nom\n1  48.841319, 2.253076                                Parc des Princes\n2  48.924388, 2.359871                                 Stade de France\n3    48.751095, 2.0759                                   Golf national\n4  48.788046, 2.034987 Vélodrome National de Saint-Quentin-en-Yvelines\n5   48.84732, 2.245501                             Stade Roland Garros\n6  48.911184, 2.546395                                Clichy-sous-Bois\n7  48.830231, 2.289126         Arena Paris Sud 4 (Porte de Versailles)\n8  48.856858, 2.351415                         Hôtel de ville de Paris\n9    48.856262, 2.2914                                     Pont d'Iéna\n10 48.838649, 2.378496                                     Arena Bercy\n     sites_olympiques_paralympiques\n1                    Site olympique\n2  Site olympique,Site paralympique\n3                    Site olympique\n4  Site olympique,Site paralympique\n5  Site olympique,Site paralympique\n6                 Site paralympique\n7  Site olympique,Site paralympique\n8                    Site olympique\n9                    Site olympique\n10 Site olympique,Site paralympique\n                                                         sports\n1                                                      Football\n2                              Athlétisme,Para athlétisme,Rugby\n3                                                          Golf\n4                    Cyclisme sur piste,Para cyclisme sur piste\n5                                   Tennis,Tennis fauteuil,Boxe\n6                                       Para cyclisme sur route\n7                          Tennis de table,Para tennis de table\n8                                                    Athlétisme\n9                                 Cyclisme sur route,Athlétisme\n10 Basketball,Basket fauteuil,Gymnastique artistique,trampoline\n\nstr(data_ex)\n\n'data.frame':   31 obs. of  4 variables:\n $ geo_point                     : chr  \"48.841319, 2.253076\" \"48.924388, 2.359871\" \"48.751095, 2.0759\" \"48.788046, 2.034987\" ...\n $ nom                           : chr  \"Parc des Princes\" \"Stade de France\" \"Golf national\" \"Vélodrome National de Saint-Quentin-en-Yvelines\" ...\n $ sites_olympiques_paralympiques: chr  \"Site olympique\" \"Site olympique,Site paralympique\" \"Site olympique\" \"Site olympique,Site paralympique\" ...\n $ sports                        : chr  \"Football\" \"Athlétisme,Para athlétisme,Rugby\" \"Golf\" \"Cyclisme sur piste,Para cyclisme sur piste\" ...\n\nsummary(data_ex)\n\n  geo_point             nom            sites_olympiques_paralympiques\n Length:31          Length:31          Length:31                     \n Class :character   Class :character   Class :character              \n Mode  :character   Mode  :character   Mode  :character              \n    sports         \n Length:31         \n Class :character  \n Mode  :character  \n\n\nLa base est constitué des variables qualitatives de type chaîne de caractères.\n\nQuestion 3\nCombien y a t’il de sites olympiques ?\n\ndata_ex |&gt; \n  count(sites_olympiques_paralympiques)\n\n    sites_olympiques_paralympiques  n\n1                                   2\n2                   Site olympique 10\n3 Site olympique,Site paralympique 16\n4                Site paralympique  3\n\ntable(grepl(\"Site olympique\",data_ex$sites_olympiques_paralympiques))\n\n\nFALSE  TRUE \n    5    26 \n\n\nNous avons 26 sites Olympiques.\n\n\nQuestion 4\nCombien y a t’il de sites paralympiques ?\n\ntable(grepl(\"Site paralympique\",data_ex$sites_olympiques_paralympiques))\n\n\nFALSE  TRUE \n   12    19 \n\n\nNous avons ici 19 sites paralympiques.\n\n\nQuestion 5\nQuels sont les sites qui accueillent plusieurs disciplines sportives ?\n\n  data_ex&lt;-data_ex |&gt; \n    mutate(many_sports=sapply(strsplit(data_ex$sports, \",\"), length)\n    )\n  plus_de_sport&lt;-data_ex |&gt; \n  filter(many_sports&gt;1)\ndim(plus_de_sport)\n\n[1] 19  5\n\n\nNous avons 19 sites qui accueillent plusieurs disciplines sportives.\n\n\nQuestion 6\nQuels sont les disciplines para-olympiques accueillies dans ces sites franciliens ?\n\ndonnees = as.tibble(data_ex)\n\nsites_paralympiques &lt;- donnees |&gt; \n  filter(str_detect(sites_olympiques_paralympiques, \"Site paralympique\"))\n\ndisciplines_paralympiques &lt;- sites_paralympiques |&gt; \n  pull(sports) |&gt; \n  strsplit(\",\") |&gt; \n  unlist() |&gt; \n  trimws()\nprint(disciplines_paralympiques)\n\n [1] \"Athlétisme\"              \"Para athlétisme\"        \n [3] \"Rugby\"                   \"Cyclisme sur piste\"     \n [5] \"Para cyclisme sur piste\" \"Tennis\"                 \n [7] \"Tennis fauteuil\"         \"Boxe\"                   \n [9] \"Para cyclisme sur route\" \"Tennis de table\"        \n[11] \"Para tennis de table\"    \"Basketball\"             \n[13] \"Basket fauteuil\"         \"Gymnastique artistique\" \n[15] \"trampoline\"              \"Boxe\"                   \n[17] \"Escrime\"                 \"Pentathlon moderne\"     \n[19] \"Volley-ball assis\"       \"Haltérophilie\"          \n[21] \"Handball\"                \"Goalball\"               \n[23] \"Judo\"                    \"Para judo\"              \n[25] \"Lutte\"                   \"Rugby fauteuil\"         \n[27] \"Natation\"                \"Para natation\"          \n[29] \"Water-polo\"              \"Canoë\"                  \n[31] \"Para canoë\"              \"Aviron\"                 \n[33] \"Para aviron\"             \"Volleyball\"             \n[35] \"Boccia\"                  \"Volleyball de plage\"    \n[37] \"Cécifoot\"                \"Badminton\"              \n[39] \"Para Badminton\"          \"Gymnastique rythmique\"  \n[41] \"Para powerlifting\"       \"Goalball\"               \n[43] \"Sports équestres\"        \"Para équitation\"        \n[45] \"Pentathlon moderne\"      \"Para athlétisme\"        \n[47] \"Escrime\"                 \"Escrime fauteuil\"       \n[49] \"Taekwondo\"               \"Para taekwondo\"         \n[51] \"Tir à l'arc\"             \"Para tir à l'arc\"       \n[53] \"Athlétisme\"              \"Cyclisme sur route\"     \n\ndisciplines_para &lt;- str_subset(disciplines_paralympiques, \"^Para\")\n\n# les différentes disciplines sont les suivantes:\nprint(unique(disciplines_para))\n\n [1] \"Para athlétisme\"         \"Para cyclisme sur piste\"\n [3] \"Para cyclisme sur route\" \"Para tennis de table\"   \n [5] \"Para judo\"               \"Para natation\"          \n [7] \"Para canoë\"              \"Para aviron\"            \n [9] \"Para Badminton\"          \"Para powerlifting\"      \n[11] \"Para équitation\"         \"Para taekwondo\"         \n[13] \"Para tir à l'arc\"       \n\n\n\n\nQuestion 7\nQuel(s) site(s) accueille(nt) le plus de disciplines différentes ?\n\nplus_de_sport |&gt; \n  arrange(desc(many_sports)) |&gt; select(nom) |&gt; head(8)\n\n                   nom\n1          Arena Bercy\n2     Arena Paris nord\n3 Stade de la Concorde\n4 Arena Champs de Mars\n5       Stade nautique\n6    Arena La Chapelle\n7         Grand Palais\n8            Invalides\n\n\nLes sites qui accueillent le plus de disciplines différentes sont: Arena Bercy, Arena Paris nord, Stade de la Concorde, Arena Champs de Mars, Stade nautique, Arena La Chapelle, Grand Palais, Invalides.\n\n\nQuestion 8\nQuel discipline aura lieu sur le plus grand nombre de sites ? Quels sont ces sites ?\n\ndisciplines_sites &lt;- donnees |&gt; \n  separate_rows(sports, sep = \",\")\n\noccurrences_disciplines &lt;- disciplines_sites |&gt; \n  group_by(sports) |&gt; \n  summarise(occurrences = n())\n\ndiscipline_max_occurrences &lt;- occurrences_disciplines |&gt; \n  filter(occurrences == max(occurrences))\n\nprint(discipline_max_occurrences)\n\n# A tibble: 1 × 2\n  sports     occurrences\n  &lt;chr&gt;            &lt;int&gt;\n1 Athlétisme           4\n\nsites_discipline_max_occurrences &lt;- disciplines_sites |&gt; \n  filter(sports == discipline_max_occurrences$sports) |&gt; \n  left_join(donnees, by = c(\"geo_point\", \"nom\", \"sites_olympiques_paralympiques\", \"sports\"))\n\nsites_discipline_max_occurrences |&gt; select(nom)\n\n# A tibble: 4 × 1\n  nom                    \n  &lt;chr&gt;                  \n1 Stade de France        \n2 Hôtel de ville de Paris\n3 Pont d'Iéna            \n4 Invalides              \n\n\nLa discipline qui aura lieu sur le plus grands nombre de sites est l’Athlétisme.\nLes differents sites concernés sont le Stade de France, Hôtel de ville de Paris, Pont d’Iéna et Invalides.\n\n\nQuestion 9\nA vol d’oiseau, quels sont les sites les deux sites les plus proches ?\n\nlibrary(geosphere)\ndonnees &lt;- donnees |&gt; \n  separate(geo_point, into = c(\"latitude\", \"longitude\"), sep = \",\") |&gt; \n  mutate(across(c(latitude, longitude), as.numeric))\n\ndf &lt;- as.data.frame(donnees)\nn &lt;- nrow(df)\n\ndonnees_distance &lt;- data.frame()\n\nfor (i in 1:(n - 1)) {\n  for (j in (i + 1): n) {\n    distance &lt;- distHaversine(\n      c(df[i, \"longitude\"], df[i, \"latitude\"]),\n      c(df[j, \"longitude\"], df[j, \"latitude\"])\n    )\ndddf &lt;- data.frame(\n  site_1=df[i,\"nom\"],\n  site_2=df[j,\"nom\"],\n  lon_1=df[i, \"longitude\"],\n  lat_1=df[i, \"latitude\"],\n  lon_2=df[j, \"longitude\"],\n  lat_2=df[j, \"latitude\"],\n  dis=distance\n)\ndonnees_distance &lt;- rbind(donnees_distance,dddf)\n  }\n}\n\nQ9 =donnees_distance |&gt; \n  filter(dis==min(dis))\nprint(Q9)\n\n                                           site_1\n1 Vélodrome National de Saint-Quentin-en-Yvelines\n                                  site_2    lon_1    lat_1    lon_2    lat_2\n1 Stade BMX de Saint-Quentin-en-Yvelines 2.034987 48.78805 2.034736 48.78726\n       dis\n1 89.30382\n\n\nLes deux sites les plus proches sont le Vélodrome national de Saint-Quentin-en-Yvelines et le Stade BMX de Saint-Quentin-en-Yvelines avec une distance de 89.30.\n\n\nQuestion 10\nQuels sont les deux sites les plus éloignés ?\n\nQ10 = donnees_distance |&gt; filter(dis==max(dis))\nprint(Q10)\n\n          site_1              site_2    lon_1    lat_1    lon_2    lat_2\n1 Stade nautique Colline d'Elancourt 2.636374 48.86223 1.967776 48.78816\n       dis\n1 49688.97\n\n\nLes deux sites les plus éloignés en terme de distance sont le Stade Nautique et Colline d’Elancourt avec une distance de 49688.97.\n\n\nQuestion 11\nVous êtes un heureux millionaire et souhaitez investir dans un bien immobilier. Vous décidez d’acheter un appartement situé au barycentre de l’ensemble des sites olympiques. Où se situe cet appartement ?\nLe barycentre correspond au centre de tous les points des sites c’est à dire les latitudes et longitudes moyennes des sites de la base de données.\n\nbarycentre &lt;- df |&gt; \n  summarise(\n    latitude = mean(latitude),\n    longitude = mean(longitude)\n  )\n\nlibrary(tidygeocoder)\n\nbarycentre |&gt; \n  tidygeocoder::reverse_geocode(lat = latitude,long = longitude)\n\n# A tibble: 1 × 3\n  latitude longitude address                                                    \n     &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;                                                      \n1     48.9      2.30 23, Avenue Pierre 1er de Serbie, Quartier de Chaillot, Par…\n\n\nL’addresse correspondante est 23 Avenue Pierre 1er de Serbie, Quartier de Chaillot, Paris 16e Arrondissement, Paris."
  },
  {
    "objectID": "posts/post-with-code/quarto3.html",
    "href": "posts/post-with-code/quarto3.html",
    "title": "TD3",
    "section": "",
    "text": "IMPORARTION DES LIBRAIRIES\nlibrary(stringr)\nlibrary(lubridate)\nlibrary(arrow)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(tidyverse)\nlibrary(jsonlite)\nlibrary(RSQLite)"
  },
  {
    "objectID": "posts/post-with-code/quarto3.html#import-et-lecture-des-données",
    "href": "posts/post-with-code/quarto3.html#import-et-lecture-des-données",
    "title": "TD3",
    "section": "Import et lecture des données",
    "text": "Import et lecture des données\n\nQuestion 1\nListez les fichiers présents dans le dossier data. Quelles sont les extensions des différents fichiers ?\n\nlist.files(\"data/\")\n\n[1] \"__MACOSX\"               \"data.sqlite\"            \"olympics_athletes.json\"\n[4] \"tokyo_athletes.parquet\"\n\n\nLes différents fichiers présents dans le dossier data sont “data.sqlite”, “olympics_athletes.json”, “tokyo_athletes.parquet” qui sont respectivement aux formats “sqlite”, “json” et “parquet”.\n\n\nQuestion 2\nLisez le fichier .parquet en utilisant la librairie arrow. Quelles sont les dimensions de la table ? Quelles sont les colonnes présentes ?\n\ndata_parquet &lt;- arrow::read_parquet(\"data/tokyo_athletes.parquet\")\ndim(data_parquet)\n\n[1] 11085     3\n\ncolnames(data_parquet)\n\n[1] \"Name\"       \"NOC\"        \"Discipline\"\n\n\nLa lecture du fichier se fait avec la fonction read_parquet du package arrow et nous avons 11 085 lignes et 3 colonnes dans la base. La base “data_parquet” est composée des colonnes “Name”, “NOC”, “Discipline”.\n\n\nQuestion 3\nLisez le fichier .json en utilisant la librairie jsonlite. Quelles sont les dimensions de la table ? Quelles sont les colonnes présentes ?\n\ndata_json &lt;- jsonlite::read_json(\"data/olympics_athletes.json\",simplifyVector = TRUE)\ndim(data_json)\n\n[1] 269731     13\n\ncolnames(data_json)\n\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n\n# l'argument \"simplifyVector=TRUE\" permet de retourner un data frame\n\nLa base de données comprend 13 colonnes et 269 731 lignes. Les colonnes représentent des variables. Les differentes variables de la base sont “ID”, “Name”, “Sex”, “Age”, “Height”, “Weight”, “Team”, “NOC”, “Games”, “City”, “Sport”, “Event”, “Medal”.\n\n\nQuestion 4\nImportez la librairie RSQLite, et ouvrez une connexion à la base de données sqlite en utilisant la fonction dbConnect. Le driver à utiliser sera SQLite(). Quelles sont les tables présentes dans la table ? Vous pourrez utiliser la fonction dbListTables.\n\nconnection &lt;-dbConnect(RSQLite::SQLite(),dbname=\"data/data.sqlite\")\ndbListTables(connection)\n\n[1] \"tokyo_medals\" \"tokyo_teams\" \n\n\nLes differentes tables présentes dans la base de données sont “tokyo_medals” et “tokyo_teams”.\n\n\nQuestion 5\nCréez deux nouvelles tables dans la base de données à l’aide de la fonction dbWriteTable. Les tables s’appeleront respectivement olympics_athletes et tokyo_athletes pour les fichiers olympics_athletes.json et tokyo_athletes.parquet.\n\ndbWriteTable(connection,\"tokyo_athletes\",data_parquet)\n\ndbWriteTable(conn = connection,name = \"olympics_athletes\", value = data_json)\ndbListTables(connection)\n\n[1] \"olympics_athletes\" \"tokyo_athletes\"    \"tokyo_medals\"     \n[4] \"tokyo_teams\"      \n\n\n\n\nQuestion 6\nInspectez la table olympics_athletes en utilisant la fonction dbListFields. Quelles sont les colonnes de la table ?\n\ndbListFields(conn = connection,name = \"olympics_athletes\")\n\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n\n\nLa table “olympics_athletes” comprend les colonnes suivantes: “ID”, “Name”, “Sex”, “Age”, “Height”, “Weight”, “Team”, “NOC”, “Games”, “City”, “Sport”, “Event”, “Medal”.\n\n\nQuestion 7\nImportez cette table depuis la base de données en utilisant la fonction dbReadTable. Convertissez la table en tibble en utilisant la fonction as_tibble.\n\nbase_oly_ath &lt;- dbReadTable(conn = connection,name = \"olympics_athletes\") |&gt; as.tibble()\nclass(base_oly_ath)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\""
  },
  {
    "objectID": "posts/post-with-code/quarto3.html#dplyr-tidyr",
    "href": "posts/post-with-code/quarto3.html#dplyr-tidyr",
    "title": "TD3",
    "section": "dplyr, tidyr",
    "text": "dplyr, tidyr\n\nQuestion 8\nConvertissez la colonne Sex en variable catégorielle avec la fonction mutate.\n\nbase_oly_ath |&gt; \n  mutate(\n    Sex=factor(Sex)\n  )\n\n# A tibble: 269,731 × 13\n      ID Name      Sex     Age Height Weight Team  NOC   Games City  Sport Event\n   &lt;int&gt; &lt;chr&gt;     &lt;fct&gt; &lt;int&gt;  &lt;int&gt;  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1     1 A Dijiang M        24    180     80 China CHN   1992… Barc… Bask… Bask…\n 2     2 A Lamusi  M        23    170     60 China CHN   2012… Lond… Judo  Judo…\n 3     3 Gunnar N… M        24     NA     NA Denm… DEN   1920… Antw… Foot… Foot…\n 4     4 Edgar Li… M        34     NA     NA Denm… DEN   1900… Paris Tug-… Tug-…\n 5     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 6     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 7     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 8     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 9     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n10     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n# ℹ 269,721 more rows\n# ℹ 1 more variable: Medal &lt;chr&gt;\n\n\n\n\nQuestion 9\nCréez deux colonnes à partir de la colonne Games. La première colonne Year sera une colonne de type integer contenant l’année des jeux. La deuxième colonne isSummer sera une colonne booléenne qui indiquera si les jeux sont des jeux d’été ou d’hiver. Vous pourrez utiliser la fonction separate_wider_delim de tidyr notamment.\n\nbase_oly_ath &lt;- base_oly_ath |&gt; separate_wider_delim(\n  Games,delim = \" \",names = c(\"Year\",\"isSummer\")\n)\nbase_oly_ath &lt;- base_oly_ath |&gt; \n  mutate(\n    Year = as.integer(Year),\n    isSummer = case_when(\n      isSummer==\"Summer\"~\"Yes\",\n      TRUE~\"No\"\n    )\n  )\nbase_oly_ath$isSummer=factor(base_oly_ath$isSummer)\n\n\n\nQuestion 10\nCalculez la moyenne d’age des athletes pour chacune des éditions des JO d’été. Quelle édition a compté les athlètes les plus jeunes ? Les plus vieux ?\n\nmoyenne &lt;- base_oly_ath |&gt; filter(isSummer==\"Yes\") |&gt; \n  group_by(Year) |&gt; summarise(\n    moyenne_age = mean(Age,na.rm = TRUE)\n  ) \nmoyenne|&gt; filter(moyenne_age==min(moyenne_age))\n\n# A tibble: 1 × 2\n   Year moyenne_age\n  &lt;int&gt;       &lt;dbl&gt;\n1  1896        23.6\n\nmoyenne |&gt; filter(moyenne_age==max(moyenne_age))\n\n# A tibble: 1 × 2\n   Year moyenne_age\n  &lt;int&gt;       &lt;dbl&gt;\n1  1932        30.2\n\n\nL’édition ayant compté les athlètes les plus jeunes est celle de 1896 avec un âge moyen de 23.6 ans tandis que l’édition qui a compté les athlètes les plus vieux est celle de 1932 avec 30.2 ans comme moyenne d’âge.\n\n\nQuestion 11\nQuelle est la discipline des JO d’été dont la taille des athlètes féminines est la plus grande ? Quelle a été cette discipline au cours de chacune des éditions ? Calculez le nombre de fois où chaque discipline a été la discipline avec les plus grandes athlètes.\n\n#\nbase_oly_ath |&gt;filter(isSummer==\"Yes\") |&gt; \n  filter(Sex==\"F\") |&gt;\n  filter(Height==max(Height,na.rm = TRUE)) #|&gt; pull(Sport)\n\n# A tibble: 1 × 14\n     ID Name    Sex     Age Height Weight Team  NOC    Year isSummer City  Sport\n  &lt;int&gt; &lt;chr&gt;   &lt;chr&gt; &lt;int&gt;  &lt;int&gt;  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;fct&gt;    &lt;chr&gt; &lt;chr&gt;\n1 31045 \"Magor… F        26    213    100 Pola… POL    2000 Yes      Sydn… Bask…\n# ℹ 2 more variables: Event &lt;chr&gt;, Medal &lt;chr&gt;\n\n#\nbase_oly_ath |&gt;filter(isSummer==\"Yes\") |&gt; \n  filter(Sex==\"F\") |&gt; group_by(Year) |&gt; \n  filter(Height==max(Height,na.rm = TRUE)) |&gt; select(Year, Sport) |&gt;\n  arrange(Year) |&gt; print(n=50) \n\n# A tibble: 37 × 2\n# Groups:   Year [23]\n    Year Sport     \n   &lt;int&gt; &lt;chr&gt;     \n 1  1920 Diving    \n 2  1924 Fencing   \n 3  1924 Tennis    \n 4  1928 Fencing   \n 5  1932 Fencing   \n 6  1936 Fencing   \n 7  1948 Athletics \n 8  1948 Athletics \n 9  1948 Athletics \n10  1952 Athletics \n11  1952 Athletics \n12  1952 Athletics \n13  1956 Athletics \n14  1960 Swimming  \n15  1960 Swimming  \n16  1964 Volleyball\n17  1964 Athletics \n18  1968 Athletics \n19  1968 Athletics \n20  1972 Athletics \n21  1976 Basketball\n22  1980 Basketball\n23  1984 Basketball\n24  1984 Basketball\n25  1988 Basketball\n26  1992 Basketball\n27  1996 Basketball\n28  2000 Basketball\n29  2004 Volleyball\n30  2004 Basketball\n31  2008 Volleyball\n32  2008 Basketball\n33  2008 Volleyball\n34  2008 Basketball\n35  2012 Basketball\n36  2016 Basketball\n37  2016 Basketball\n\ntab &lt;-base_oly_ath |&gt;filter(isSummer==\"Yes\") |&gt; \n  filter(Sex==\"F\") |&gt; group_by(Year) |&gt; \n  filter(Height==max(Height,na.rm = TRUE)) |&gt; select(Year, Sport) |&gt;\n  arrange(Year) \ntab |&gt; group_by(Sport)|&gt; summarize(occurrence=n()) |&gt; arrange(desc(occurrence))\n\n# A tibble: 7 × 2\n  Sport      occurrence\n  &lt;chr&gt;           &lt;int&gt;\n1 Basketball         14\n2 Athletics          11\n3 Fencing             4\n4 Volleyball          4\n5 Swimming            2\n6 Diving              1\n7 Tennis              1"
  },
  {
    "objectID": "posts/post-with-code/quarto3.html#stringr-lubridate",
    "href": "posts/post-with-code/quarto3.html#stringr-lubridate",
    "title": "TD3",
    "section": "stringr, lubridate",
    "text": "stringr, lubridate\n\ntexte &lt;-c(\"Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois\n de Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016,\n ceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du\n 26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde\n entier à Paris.\")\n\n\nQuestion 12\nEn utilisant les fonctions du packages stringr, extrayez les dates des différentes éditions des JO. Aide : définissez une expression régulière capable de capturer une séquence de caractères représentant une date telle que “26 Juillet 2024”. Vous pourrez utiliser cette regex avec la fonction str_extract_all par exemple.\n\npattern &lt;- \"\\\\b\\\\d{1,2} [A-Za-zéû]+ \\\\d{4}\\\\b\"\nles_dates &lt;- str_extract_all(texte, pattern)[[1]]\n\n\n\nQuestion 13\nRemplacez les noms des mois par leur numéro pour rendre ces éléments convertibles en date en utilisant la fonction str_replace.\n\nmois_numero &lt;- function(mois) {\n  mois &lt;- tolower(mois)  \n  mois_num &lt;- switch(mois,\n                     \"janvier\" = \"01\",\n                     \"février\" = \"02\",\n                     \"mars\" = \"03\",\n                     \"avril\" = \"04\",\n                     \"mai\" = \"05\",\n                     \"juin\" = \"06\",\n                     \"juillet\" = \"07\",\n                     \"août\" = \"08\",\n                     \"septembre\" = \"09\",\n                     \"octobre\" = \"10\",\n                     \"novembre\" = \"11\",\n                     \"décembre\" = \"12\")  \n  return(mois_num)\n}\ndates_numerique &lt;- str_replace_all(les_dates, \"\\\\b[A-Za-zéû]+\\\\b\", mois_numero)\n\n\n\nQuestion 14\nConvertissez ces 3 éléments en date en utilisant la fonction appropriée du package lubridate.\n\ndates_num_en_date &lt;- dmy(dates_numerique)\nclass(dates_num_en_date)\n\n[1] \"Date\"\n\ndates_num_en_date\n\n[1] \"2016-08-05\" \"2016-08-20\" \"2021-07-23\" \"2021-08-08\" \"2024-07-26\"\n[6] \"2024-08-11\"\n\n\n\n\nQuestion 15\nCombien de jours ont séparés les éditions de Rio et Tokyo ? Et sépareront les éditions de Tokyo et de Paris ? Faites le même calcul en semaines.\n\n# rio: 5 Août 2016 au 20 Août 2016 et tokyo:23 Juillet 2021 au 8 Août 2021\n# paris: 26 Juillet 2024\nrio_debut &lt;-dmy(\"5 Août 2016\")\nrio_fin &lt;- dmy(\"20 Août 2016\")\ntokyo_debut &lt;- dmy(\"23 Juillet 2021\")\ntokyo_fin &lt;-dmy(\"8 Août 2021\")\nparis_debut &lt;-dmy(\"26 Juillet 2024\")\n# ecart \n# rio tokyo\ndifftime(tokyo_debut,rio_fin,units = c(\"days\"))\n\nTime difference of 1798 days\n\n# tokyo paris\ndifftime(paris_debut,tokyo_fin,units = c(\"days\"))\n\nTime difference of 1083 days\n\n#en semaines\n# rio tokyo\ndifftime(tokyo_debut,rio_fin,units = c(\"weeks\"))\n\nTime difference of 256.8571 weeks\n\n# tokyo paris\ndifftime(paris_debut,tokyo_fin,units = c(\"weeks\"))\n\nTime difference of 154.7143 weeks"
  },
  {
    "objectID": "posts/post-with-code/TD2.html",
    "href": "posts/post-with-code/TD2.html",
    "title": "TD2",
    "section": "",
    "text": "library(rvest)\nlibrary(purrr)\nlibrary(dplyr)\nlibrary(tidyverse)\n\n\nQuestion 1\nLancez la commande suivante :\n\nlist_tables &lt;-\n  session(\"https://fr.wikipedia.org/wiki/Liste_des_m%C3%A9daill%C3%A9s_olympiques\") |&gt;\n  html_elements(\".wikitable\") |&gt;\n  html_table()\n\nList_tables contient un ensemble de lites obtenues sur le lien founri dans la commande ci-dessus.\n\n\nQuestion 2\nNous allons tout d’abord nous intéresser à la première table. Créez un objet intitulé data_medailles_sport_ete contenant le premier élément de list_tables. La table n’est pas bien formattée. Supprimez la première colonne, les noms de colonnes et la première ligne. Renommez les colonnes en c(“Discipline”, “Annees”, “Editions”, “Epreuves_2020”, “Or”, “Argent”, “Bronze”, “Total”, “Athletes_medailles”, “Athletes_or”). Les colonnes Editions, Epreuves_2020, Or, Argent, Bronze, Total seront converties en colonnes d’entiers.\n\ndata_medailles_sport_ete=list_tables[[1]]\ndata_medailles_sport_ete=data_medailles_sport_ete[-1,-1]\n\n\nnouveau=c(\"Discipline\", \"Annees\", \"Editions\",\n          \"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\", \"Total\", \"Athletes_medailles\",\n          \"Athletes_or\")\ncolnames(data_medailles_sport_ete)&lt;-nouveau\ndata_medailles_sport_ete[, 3:8] &lt;- sapply(data_medailles_sport_ete[, 3:8],as.integer)\n\n\n\nQuestion 3\nQuelles sont les 3 disciplines avec le plus de médailles distribuées depuis le début de l’histoire des jeux olympiques ?\n\ndata_medailles_sport_ete |&gt; \n  arrange(desc(Total)) |&gt; \n  slice(1:3)\n\n# A tibble: 3 × 10\n  Discipline             Annees Editions Epreuves_2020    Or Argent Bronze Total\n  &lt;chr&gt;                  &lt;chr&gt;     &lt;int&gt;         &lt;int&gt; &lt;int&gt;  &lt;int&gt;  &lt;int&gt; &lt;int&gt;\n1 Athlétisme             Depui…       29            48  1028   1030   1027  3085\n2 Natation(hommes, femm… Depui…       29            37   607    604    603  1814\n3 Lutte                  1896,…       28            18   430    429    499  1358\n# ℹ 2 more variables: Athletes_medailles &lt;chr&gt;, Athletes_or &lt;chr&gt;\n\n\nLes trois disciplines sont l’Athlétisme, la Natation(hommes, femmes) et la Lutte.\n\n\nQuestion 4\nQuelles sont les disciplines avec le moins d’épreuves en 2020 ?\n\ndata_medailles_sport_ete |&gt; \n  arrange(Epreuves_2020) |&gt; slice(1:8)\n\n# A tibble: 8 × 10\n  Discipline            Annees  Editions Epreuves_2020    Or Argent Bronze Total\n  &lt;chr&gt;                 &lt;chr&gt;      &lt;int&gt;         &lt;int&gt; &lt;int&gt;  &lt;int&gt;  &lt;int&gt; &lt;int&gt;\n1 Football              1900–1…       27             2    34     34     35   103\n2 Golf                  1900–1…        4             2     8      8      9    19\n3 Handball              1936,d…       14             2    26     26     26    78\n4 Hockey sur gazon      1908, …       24             2    35     35     36   106\n5 Natation synchronisée Depuis…       10             2    20     18     19    57\n6 Pentathlon moderne    Depuis…       25             2    42     42     42   126\n7 Volley-ball           Depuis…       15             2    30     30     30    90\n8 Water polo            1900,d…       26             2    28     28     29    85\n# ℹ 2 more variables: Athletes_medailles &lt;chr&gt;, Athletes_or &lt;chr&gt;\n\n\nLes disciplines avec le moins d’épreuves sont le Football, le Golf, le Handball, le Hockey sur gazon, la Natation synchronisée, Pentathlon moderne, le Volley-ball, et le Water polo avec 2 épreuves.\n\n\nQuestion 5\nLa colonne Editions nous renseigne sur le nombre total d’apparence des disciplines aux JO d’été. Nous souhaitons vérifier ce calcul en implémentant notre propre fonction calcul_nb_editions_int. Dans un premier temps, la fonction calcul_nb_editions prendra en entrée un paramètre depuis, de type entier, qui représente depuis quelle année la discipline est au programme.\n\ncalcul_nb_editions_int &lt;- function(depuis){\n  annee &lt;- 2020\n  int &lt;- 4\n  x &lt;- ((annee-depuis)/4)+1\n  if (depuis&lt;1916){\n    nb_ed &lt;- x-3\n    nb_ed\n  }\n  if(depuis&gt;1916){\n    nb_ed &lt;- x-2\n    nb_ed\n  }\n  if(depuis&gt;1944){\n    nb_ed &lt;- x\n    nb_ed\n  }\n  nb_ed\n}\n\n\n\nQuestion 6\nDans certains cas, les disciplines ont été au programme de façon discontinue. Proposez une nouvelle fonction calcul_nb_editions_str qui prendra cette fois-ci en entrée des chaînes de caractères. Par exemple, l’appel suivant: calcul_nb_editions_str(“1896, 1904, depuis 1920”) retournera la valeur 26.\n\n  calcul_nb_editions_str &lt;- function(x){\n    \n    z &lt;- str_split(x,\",\",simplify = TRUE)\n    r &lt;- as.matrix(ifelse(!grepl(\"depuis|-\",z),\"P\",z))\n    # permet de compter le nombre de valeur unique pour l'année \n    \n    res_annee &lt;- 0\n    res_depuis &lt;- 0\n    res_tiret &lt;- 0\n    \n    calcul_nb_editions_int &lt;- function(depuis){\n      annee &lt;- 2020\n      int &lt;- 4\n      x &lt;- ((annee-depuis)/4)+1\n      if (depuis&lt;1916){\n        nb_ed &lt;- x-3\n        nb_ed\n      }\n      if(depuis&gt;1916){\n        nb_ed &lt;- x-2\n        nb_ed\n      }\n      if(depuis&gt;1944){\n        nb_ed &lt;- x\n        nb_ed\n      }\n      return(nb_ed)\n    }\n    \n    calcul_nb_editions_interne  &lt;- function(deb,fi){\n      \n      int &lt;- 4\n      x &lt;- ((fi-deb)/4)+1\n      if (fi &lt; 1916 & deb &lt; 1916){\n        nb_ed &lt;- x\n        nb_ed\n      }\n      if (deb &lt; 1916 & fi &lt; 1944){\n        nb_ed &lt;- x-1\n        nb_ed\n      }\n      if (deb &lt; 1916 & fi&gt; 1944){\n        nb_ed &lt;- x-3\n        nb_ed\n      }\n      if(deb&gt;1916 & fi &lt; 1944){\n        nb_ed &lt;- x\n        nb_ed\n      }\n      if(deb &gt; 1916 & fi &gt; 1944){\n        nb_ed &lt;- x-2\n        nb_ed\n      }\n      \n      if (deb &gt; 1944 & fi &gt; 1944){\n        nb_ed &lt;- x\n        nb_ed\n      }\n      \n      return(nb_ed)\n    }\n    \n    \n    for (j in 1:nrow(r)) {\n      if (any(str_detect(r[j, 1], \"-\"))) {\n        e &lt;- sapply(str_split(r[j, 1], \"-\"), as.integer)\n        debut &lt;- e[1, 1]\n        fin &lt;- e[2, 1]\n        res_tiret &lt;- calcul_nb_editions_interne(debut, fin)\n      }\n      \n      if (any(str_detect(r[j, 1], \"depuis\"))) {\n        d &lt;- as.integer(str_extract_all(r[j, 1], \"\\\\d+\"))\n        res_depuis &lt;- calcul_nb_editions_int(d)\n      }\n      \n      if(is.character(r[j, 1])){\n        sp &lt;- str_detect(r,\"P\")\n        res_annee &lt;- sum(sp)  # premier cas de fonction \n      }\n    }\n    \n    resultat &lt;- sum(res_depuis, res_tiret, res_annee)\n    return(resultat)\n    \n    \n  }\n calcul_nb_editions_str(\"1896, 1904, depuis 1920\")\n\n[1] 26\n\n\n\n\nQuestion 7\nDéfinissez une fonction générique calcul_nb_editions et deux implémentations calcul_nb_editions.integer et ’calcul_nb_editions.character.\n\ncalcul_nb_editions &lt;- function(temps){\n  \n  calcul_nb_editions.integer &lt;- function(x){\n    result &lt;- length(x)\n    return(result)\n    \n  }\n  \n  \n  calcul_nb_editions.character &lt;- function(x){\n    \n    z &lt;- str_split(x,\",\",simplify = TRUE)\n    r &lt;- as.matrix(ifelse(!grepl(\"depuis|-\",z),\"P\",z))\n    # permet de compter le nombre de valeur unique pour l'année \n    \n    res_annee &lt;- 0\n    res_depuis &lt;- 0\n    res_tiret &lt;- 0\n    \n    calcul_nb_editions_int &lt;- function(depuis){\n      annee &lt;- 2020\n      int &lt;- 4\n      x &lt;- ((annee-depuis)/4)+1\n      if (depuis&lt;1916){\n        nb_ed &lt;- x-3\n        nb_ed\n      }\n      if(depuis&gt;1916){\n        nb_ed &lt;- x-2\n        nb_ed\n      }\n      if(depuis&gt;1944){\n        nb_ed &lt;- x\n        nb_ed\n      }\n      return(nb_ed)\n    }\n    \n    calcul_nb_editions_interne  &lt;- function(deb,fi){\n      \n      int &lt;- 4\n      x &lt;- ((fi-deb)/4)+1\n      if (fi &lt; 1916 & deb &lt; 1916){\n        nb_ed &lt;- x\n        nb_ed\n      }\n      if (deb &lt; 1916 & fi &lt; 1944){\n        nb_ed &lt;- x-1\n        nb_ed\n      }\n      if (deb &lt; 1916 & fi&gt; 1944){\n        nb_ed &lt;- x-3\n        nb_ed\n      }\n      if(deb&gt;1916 & fi &lt; 1944){\n        nb_ed &lt;- x\n        nb_ed\n      }\n      if(deb &gt; 1916 & fi &gt; 1944){\n        nb_ed &lt;- x-2\n        nb_ed\n      }\n      \n      if (deb &gt; 1944 & fi &gt; 1944){\n        nb_ed &lt;- x\n        nb_ed\n      }\n      \n      return(nb_ed)\n    }\n    \n    \n    for (j in 1:nrow(r)) {\n      if (any(str_detect(r[j, 1], \"-\"))) {\n        e &lt;- sapply(str_split(r[j, 1], \"-\"), as.integer)\n        debut &lt;- e[1, 1]\n        fin &lt;- e[2, 1]\n        res_tiret &lt;- calcul_nb_editions_interne(debut, fin)\n      }\n      \n      if (any(str_detect(r[j, 1], \"depuis\"))) {\n        d &lt;- as.integer(str_extract_all(r[j, 1], \"\\\\d+\"))\n        res_depuis &lt;- calcul_nb_editions_int(d)\n      }\n      \n      if(is.character(r[j, 1])){\n        sp &lt;- str_detect(r,\"P\")\n        res_annee &lt;- sum(sp)  # premier cas de fonction \n      }\n    }\n    \n    resultat &lt;- sum(res_depuis, res_tiret, res_annee)\n    return(resultat)\n    \n    \n  }\n  \n  # declaration resultat \n  if(is.numeric(temps)){\n    valeur_int &lt;- calcul_nb_editions.integer(temps)\n    return(valeur_int)\n  }\n  if(is.character(temps)){\n    valeur_char &lt;- calcul_nb_editions.character(temps)\n    return(valeur_char)\n  }\n  # fin de la fonction \n  \n}\n\ncalcul_nb_editions(2000)\n\n[1] 1\n\ncalcul_nb_editions(\"1904–1924, depuis 1948\")\n\n[1] 20"
  },
  {
    "objectID": "posts/post-with-code/pack.html#visualisation-des-previsions",
    "href": "posts/post-with-code/pack.html#visualisation-des-previsions",
    "title": "Package usage",
    "section": "Visualisation des previsions",
    "text": "Visualisation des previsions\nPour la visualisation des prévisions j’ai developpé une application Shiny dans le but de selectionner certains niveau d’affichage pour les valeurs de températures, précipitation et des probabilités de précipitation.\nEtant donné que ce Blog est un site statique, l’application ne se chargera pas.\nJe vous laisse le code de la fonction visualization_forecast qui permet de convertir les données obtenues dans un get_forecast en des graphiques présentés dans une application R-Shiny.\nVous pouvez lancer les differentes lignes de code suivante pour un apperçu.\n\nlibrary(shiny)\n  library(ggplot2)\n  library(shinythemes) \n  library(olympicsWeather)\n\n\nvisualization_forecast &lt;- function(localisation){\n  \n  # donnees pour la visualisation\n  donnees_meteo &lt;- get_forecast(localisation)\n  donnees_meteo=as.data.frame(donnees_meteo)\n  donnees_meteo[,2:5]&lt;- sapply(donnees_meteo[,2:5],as.integer)\n  donnees_meteo[,1]&lt;-as.Date(unlist(donnees_meteo[,1]))\n  \n  ###\n  dates &lt;- donnees_meteo$date_heure\n  temperature &lt;- donnees_meteo$temperature_celsius\n  temperature_ressentie &lt;- donnees_meteo$temperature_ressentie_celsius\n  precipitation &lt;- donnees_meteo$precipitation\n  prob_precipitation &lt;- donnees_meteo$precipitation_proba\n  ###\n  \n  # Interface utilisateur\n  ui &lt;- fluidPage(\n    theme = shinytheme(\"flatly\"),\n    titlePanel(\"Météo\"),\n    sidebarLayout(\n      sidebarPanel(\n        sliderInput(\"temperature\", \"Température\", min = 0, max = 40, value = c(0, 40)),\n        sliderInput(\"precipitation\", \"Précipitation\", min = 0, max = 10, value = c(0, 10)),\n        sliderInput(\"prob_precipitation\", \"Probabilité de Précipitation\", min = 0, max = 100, value = c(0, 100))\n      ),\n      mainPanel(\n        plotOutput(\"weatherPlot\")\n      )\n    )\n  )\n  \n  # Server\n  server &lt;- function(input, output) {\n    filtered_data &lt;- reactive({\n      subset_data &lt;- subset(\n        data.frame(date = dates, temperature = temperature, precipitation = precipitation, prob_precipitation = prob_precipitation),\n        temperature &gt;= input$temperature[1] & temperature &lt;= input$temperature[2] &\n          precipitation &gt;= input$precipitation[1] & precipitation &lt;= input$precipitation[2] &\n          prob_precipitation &gt;= input$prob_precipitation[1] & prob_precipitation &lt;= input$prob_precipitation[2]\n      )\n      return(subset_data)\n    })\n    \n    output$weatherPlot &lt;- renderPlot({\n      ggplot(filtered_data(), aes(x = date, y = temperature, color = precipitation, size = prob_precipitation)) +\n        geom_point() +\n        labs(title = \"Graphique Météo\",\n             x = \"Date\",\n             y = \"Température\",\n             color = \"Précipitation\",\n             size = \"Probabilité de Précipitation\")+\n        theme_minimal() +  \n        theme(\n          plot.background = element_rect(fill = \"#CCE5FF\"),  \n          panel.grid.major = element_line(color = \"#99C2FF\"), \n          panel.grid.minor = element_line(color = \"#B3D9FF\"),  \n          axis.text = element_text(color = \"#333333\"),  \n          axis.title = element_text(color = \"#333333\", size = 12, face = \"bold\") \n        )\n      \n    })\n  }\n  \n  shinyApp(ui, server)\n  \n}\n\nvisualization_forecast(c(67,4))\n\nShiny applications not supported in static R Markdown documents"
  }
]